<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>SwiftWasm Blog</title><description></description><link>https://blog.swiftwasm.org</link><language>en</language><lastBuildDate>Wed, 30 Sep 2020 19:06:11 +0000</lastBuildDate><pubDate>Wed, 30 Sep 2020 19:06:11 +0000</pubDate><ttl>250</ttl><atom:link href="https://blog.swiftwasm.org/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://blog.swiftwasm.org/posts/september-2020</guid><title>September 2020 Update</title><description>An update on what happened in the SwiftWasm ecosystem during September 2020.</description><link>https://blog.swiftwasm.org/posts/september-2020</link><pubDate>Wed, 30 Sep 2020 14:34:00 +0000</pubDate><content:encoded><![CDATA[<h1>September 2020 Update</h1><p>Welcome to the SwiftWasm blog! The amount of work happening in <a href="https://github.com/swiftwasm">the SwiftWasm ecosystem</a> is growing, so we decided to start publishing blog updates to give you an overview of what happened recently. This update for September is big enough to be split into different sections for each area of our work, so let's get started. ðŸ™‚</p><h2>Libraries</h2><p><a href="https://github.com/swiftwasm/JavaScriptKit/releases/tag/0.7.0">JavaScriptKit 0.7</a> has been released. It adds multiple new types bridged from JavaScript, namely <code>JSError</code>, <code>JSDate</code>, <code>JSTimer</code> (which corresponds to <code>setTimeout</code>/<code>setInterval</code> calls and manages closure lifetime for you), <code>JSString</code> and <code>JSPromise</code>. We now also have <a href="https://swiftwasm.github.io/JavaScriptKit/">documentation published automatically</a> for the <code>main</code> branch.</p><p>New features of JavaScriptKit allowed us to start working on closer integration with <a href="https://github.com/OpenCombine/OpenCombine">OpenCombine</a>. The current progress is available in the new <a href="https://github.com/swiftwasm/OpenCombineJS">OpenCombineJS</a> repository, and we plan to tag a release for it soon. At the moment it has a <code>JSScheduler</code> class wrapping <code>JSTimer</code> that implements <a href="https://developer.apple.com/documentation/combine/scheduler">the <code>Scheduler</code> protocol</a>, enabling you to use <code>debounce</code> and other time-based operators. Additionally, OpenCombineJS now provides a helper <code>publisher</code> property on <code>JSPromise</code>, which allows you to integrate any promise-based API with an OpenCombine pipeline.</p><p>We also saw a lot of great progress with <a href="https://github.com/swiftwasm/DOMKit">DOMKit</a> in September thanks to the outstanding work by <a href="https://jedfox.com/">Jed Fox</a> and <a href="https://github.com/Unkaputtbar">@Unkaputtbar</a>, which was unblocked by the recent additions to JavaScriptKit. With DOMKit we're going to get type-safe access to the most common browser DOM APIs. It will be expanded in the future to support even more features that currently are only available via JavaScriptKit through force unwrapping and dynamic casting.</p><p>That is, compare the current API you get with JavaScriptKit:</p><pre><code><span class="splash-keyword">import</span> JavaScriptKit

<span class="splash-keyword">let</span> document = <span class="splash-type">JSObject</span>.<span class="splash-property">global</span>.<span class="splash-property">document</span>.<span class="splash-property">object</span>!

<span class="splash-keyword">let</span> divElement = document.<span class="splash-property">createElement</span>!(<span class="splash-string">"div"</span>).<span class="splash-property">object</span>!
divElement.<span class="splash-property">innerText</span> = <span class="splash-string">"Hello, world"</span>
<span class="splash-keyword">let</span> body = document.<span class="splash-property">body</span>.<span class="splash-property">object</span>!
<span class="splash-keyword">_</span> = body.<span class="splash-property">appendChild</span>!(divElement)
</code></pre><p>to an equivalent snippet that could look like this with DOMKit:</p><pre><code><span class="splash-keyword">import</span> DOMKit

<span class="splash-keyword">let</span> document = global.<span class="splash-property">document</span>

<span class="splash-keyword">let</span> divElement = document.<span class="splash-call">createElement</span>(<span class="splash-string">"div"</span>)
divElement.<span class="splash-property">innerText</span> = <span class="splash-string">"Hello, world"</span>
document.<span class="splash-property">body</span>.<span class="splash-call">appendChild</span>(divElement)
</code></pre><p>Lastly on the libraries front, <a href="https://github.com/TokamakUI/Tokamak/releases">Tokamak 0.4</a> is now available, enabling compatibility with the new version of JavaScriptKit, and utilizing the aforementioned <code>JSScheduler</code> implementation.</p><h2>Developer tools</h2><p>Following the new 0.7 release of JavaScriptKit, <a href="https://github.com/swiftwasm/carton/releases/tag/0.6.0"><code>carton</code> 0.6</a> has been tagged, shipping with the appropriate JavaScriptKit runtime compatible with the new release. It also includes support for the new <code>carton bundle</code> command that produces a directory with optimized build output ready for deployment on a CDN or any other server. Notably, both <code>carton bundle</code> and <code>carton dev</code> support <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0271-package-manager-resources.md">SwiftPM package resources</a>, allowing you to include additional static content to your SwiftWasm apps. These could be styles, scripts, images, fonts, or whatever other data you'd like to ship with your app.</p><p>This version of <code>carton</code> also ships with the latest version of <a href="https://github.com/wasmerio/wasmer-js/">wasmer.js</a>, which is one of our dependencies. This update brings compatibility of SwiftWasm apps with Safari 14 that was released recently.</p><h2>Toolchain/SDK work</h2><p>The upstream Swift toolchain has switched to use <a href="http://llvm.org">LLVM</a> 11 in the <code>main</code> branch, which caused a substantial amount of conflicts in our forked repositories. We've spent most of our time in September on resolving the fallout from that and making sure everything builds properly. You could've noticed that the previously steady stream of nighly development snapshots stalled for most of September, but it resumed starting with <code>wasm-DEVELOPMENT-SNAPSHOT-2020-09-20-a</code>.</p><p>As for the 5.3 branch, with the upstream Swift 5.3.0 release now generally available, we're currently preparing a stable SwiftWasm 5.3.0 release. It is based off upstream 5.3.0 with our patches applied to the toolchain and the SDK. <a href="https://github.com/swiftwasm/swift/issues/1759">We've created a checklist</a> that allows us to track the progress of this effort.</p><p>One of the issues we wanted to resolve before tagging SwiftWasm 5.3.0 is the inconsistency between WASI and Glibc APIs. While there's a subset of these APIs that looks and works the same, there are a lot of differences that our users should be aware of. Because of this, in subsequent snapshots our users need to use <code>import WASILibc</code> instead of <code>import Glibc</code> if they need to access to libc on the WASI platform. This has already landed in the <code>swiftwasm-release/5.3</code> branch with <a href="https://github.com/swiftwasm/swift/pull/1773">swiftwasm/swift#1773</a> and is available in <code>wasm-5.3-SNAPSHOT-2020-09-23-a</code> or later. It was also implemented in the main <code>swiftwasm</code> branch in <a href="https://github.com/swiftwasm/swift/pull/1832">swiftwasm/swift#1832</a>, all thanks to the amazing work by <a href="https://github.com/sponsors/kateinoigakukun">Yuta Saito</a>.</p><h2>Upstream PRs</h2><p>The divergence between the SwiftWasm toolchain and SDKs is still significant and causes regular conflicts that we have to resolve manually. We're working on making our changes available upstream, but this takes a lot of time, as upstream toolchain and SDK PRs need high level of polish to be accepted. Here's a list of PRs that had some progress in September:</p><h3>Foundation</h3><ul><li>Add locking primitives for <code>TARGET_OS_WASI</code> in <code>CFLocking.h</code> <a href="https://github.com/apple/swift-corelibs-foundation/pull/2867">apple/swift-corelibs-foundation#2867</a>. <strong>Status: merged.</strong></li><li>Add support for WASI in <code>CFInternal.h</code> <a href="https://github.com/apple/swift-corelibs-foundation/pull/2872">apple/swift-corelibs-foundation#2872</a>. <strong>Status: merged.</strong></li><li>Add WASI support in <code>CoreFoundation_Prefix.h</code> <a href="https://github.com/apple/swift-corelibs-foundation/pull/2873">apple/swift-corelibs-foundation#2873</a>. <strong>Status: merged.</strong></li><li>Add support for WASI in <code>CFDate.c</code> <a href="https://github.com/apple/swift-corelibs-foundation/pull/2880">apple/swift-corelibs-foundation#2880</a>. <strong>Status: in review.</strong></li></ul><h3>SwiftPM</h3><ul><li>Propagate PATH to UserToolchain to fix sysroot search <a href="https://github.com/apple/swift-package-manager/pull/2936">apple/swift-package-manager#2936</a>. <strong>Status: merged.</strong></li></ul><h2>Contributions</h2><p>We hope you can contribute to the SwiftWasm ecosystem, either to any of the projects listed above, or with your own libraries and apps that you built. We'd be very happy to feature your open-source work in our next update! Our whole <a href="https://swiftwasm.org">swiftwasm.org</a> website including this blog <a href="https://github.com/swiftwasm/swiftwasm.org">is open-source</a>, so please feel free to open an issue or a pull request with a link to your work related to SwiftWasm.</p><p>A lot of the progress wouldn't be possible without payments from our GitHub Sponsors. Their contribution is deeply appreciated and allows us to spend more time on SwiftWasm projects. You can see the list of sponsors and make your contribution on the sponsorship pages of <a href="https://github.com/sponsors/kateinoigakukun">Yuta Saito</a> and <a href="https://github.com/sponsors/MaxDesiatov">Max Desiatov</a>.</p><p>Thanks for reading! ðŸ‘‹</p>]]></content:encoded></item></channel></rss>